import { NextResponse } from 'next/server';
import OpenAI from 'openai';

// Define message interface to match OpenAI API expectations
interface Message {
  role: 'user' | 'assistant' | 'system';
  content: string;
}

// Initialize the OpenAI client
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

// System prompt for the chat assistant
const systemPrompt = `
You are a helpful AI assistant specializing in Three.js and React Three Fiber (R3F). You're integrated into a platform that allows users to generate 3D scenes from text prompts.

Your tasks:
1. Answer questions about Three.js, R3F, and 3D web development
2. Explain code that has been generated by the system
3. Provide suggestions for improving or modifying existing scenes
4. Help troubleshoot issues with generated scenes
5. Be friendly, helpful, and concise in your responses

When users ask you to fix errors or fix their scene:
- Tell them you'll help fix the scene
- If they mentioned a specific error, acknowledge it
- Respond that you're going to fix the scene and will notify them when it's complete
- DO NOT explain how you would fix it with code examples - the platform will automatically fix it

Example fix requests:
- "Can you fix this error for me?"
- "Fix the scene please"
- "There's an error, can you fix it?"
- "The scene isn't working, please fix it"

Remember:
- When referring to the platform, call it "Three0" (pronounced "Three-Zero")
- If the user asks for a new scene or significant modification, guide them to use the main prompt instead of explaining how to code it manually
- Keep responses brief and focused on helping users understand and work with the generated 3D scenes
- When discussing code, be precise and reference specific parts of the code by line number or function name
- Only use markdown formatting when absolutely necessary for code snippets or lists

IMPORTANT: You are a chat assistant only. You do not generate or modify the code directly. That is handled by a separate system.
`;

export async function POST(request: Request) {
  try {
    const body = await request.json();
    const { messages = [], sceneCode = '' } = body;

    if (!messages || !Array.isArray(messages) || messages.length === 0) {
      return NextResponse.json(
        { error: 'Valid messages array is required' },
        { status: 400 }
      );
    }

    // Create the conversation history for the API
    const conversationHistory: Message[] = messages.map((msg: any) => ({
      role: msg.role as 'user' | 'assistant' | 'system',
      content: msg.content
    }));

    // Add context about the current scene code if available
    let systemMessage = systemPrompt;
    if (sceneCode) {
      systemMessage += `\n\nCurrent scene code:\n\`\`\`jsx\n${sceneCode}\n\`\`\`\n\nRefer to this code when answering the user's questions.`;
    }

    // Prepare the complete message list for the API call
    const apiMessages: Message[] = [
      { role: 'system', content: systemMessage },
      ...conversationHistory
    ];

    // Call OpenAI API
    const completion = await openai.chat.completions.create({
      model: 'gpt-4.1-mini', // Use gpt-4.1-mini as specified
      messages: apiMessages,
      temperature: 0.7,
      max_tokens: 1000,
    });

    // Extract the response
    const responseMessage = completion.choices[0]?.message?.content?.trim() || '';
    
    return NextResponse.json({
      message: responseMessage,
      role: 'assistant'
    });
  } catch (error: any) {
    console.error('Error in chat:', error);
    return NextResponse.json(
      { error: error.message || 'Failed to process chat message' },
      { status: 500 }
    );
  }
} 